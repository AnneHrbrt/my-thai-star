pipeline{
    agent any

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '1', artifactNumToKeepStr: '1', daysToKeepStr: '5', numToKeepStr: '50'))
        // Disable concurrent builds. It will wait until the pipeline finish before start a new one
        disableConcurrentBuilds()
    }

    environment {
        containerPort = 8090
        sshAgentCredentials = '3d0fa2a4-5cf0-4cf5-a3fd-23655eb33c11'

        nexusApiUrl = 'devon.s2-eu.capgemini.com/nexus3/'
        repository = 'snapshots'
        format = 'maven2'
        group = 'com.devonfw.mythaistar'
        name = 'mythaistar-restaurant'
        extension = 'zip'
    }

    parameters {
        string(name: 'VERSION', defaultValue: '1.12.0-SNAPSHOT', description: 'Version number') 
        string(name: 'EXTERNAL_SERVER_IP', defaultValue: '10.40.235.244', description: 'Server IP') 
    }

    stages {
        stage ('Download artifact from Nexus') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'pl-technical-user', passwordVariable: 'pass', usernameVariable: 'user')]) {
                        def response = httpRequest """https://${user}:${pass}@${nexusApiUrl}service/rest/beta/search/assets?repository=${repository}&format=${format}&group=${group}&name=${name}&maven.groupId=${group}&maven.artifactId=${name}&maven.baseVersion=${params.VERSION}&maven.extension=${extension}"""
                        def props = readJSON text: response.content
                
                        def num = -1
                        def url = ''
                        props.items.each { 
                            def n = (it.downloadUrl =~ /.*-(\d*)\.zip/)[0][1]
                            if (n > num) {
                                num = n
                                url = it.downloadUrl
                            }
                        }
                        
                        sh """wget -O ${name}-${params.VERSION}.${extension} ${url.replace('https://','https://'+user+':'+pass+'@')}"""

                        sh "mkdir -p dist"
                        unzip dir: 'dist', zipFile: """${name}-${params.VERSION}.${extension}"""                    
                    }
                }
            }
        }
        
        stage ('Deployment') {
            steps {
                script {
                    dir('dist'){
                        sshagent (credentials: [sshAgentCredentials]) {
                            sh """
                                # Copy resulting "dist" folder from workspace to deployment server
                                ssh -o StrictHostKeyChecking=no root@${params.EXTERNAL_SERVER_IP} mkdir -p /root/mythaistar/reverse-proxy/angular/dist/
                                ssh -o StrictHostKeyChecking=no root@${params.EXTERNAL_SERVER_IP} rm -r /root/mythaistar/reverse-proxy/angular/dist/* 2> /dev/null
                                scp -o StrictHostKeyChecking=no -r . root@${params.EXTERNAL_SERVER_IP}:/root/mythaistar/reverse-proxy/angular/dist/
                                
                                # Launch application in Docker container
                                ssh -o StrictHostKeyChecking=no root@${params.EXTERNAL_SERVER_IP} docker-compose -f /root/mythaistar/reverse-proxy/docker-compose.yml up -d --build
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}