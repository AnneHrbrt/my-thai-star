pipeline{
    agent any

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '1', artifactNumToKeepStr: '1', daysToKeepStr: '5', numToKeepStr: '50'))
        // Disable concurrent builds. It will wait until the pipeline finish before start a new one
        disableConcurrentBuilds()
    }

    environment {
        // Jenkins credentials id for ssh agent
        sshAgentCredentials = '3d0fa2a4-5cf0-4cf5-a3fd-23655eb33c11'

        // Nexus3 API url 
        nexusApiUrl = 'http://nexus3-core:8081/nexus3'
        // Nexus3 credentials ID
        nexusCredentialsId = 'nexus-technical-api'
        // Maven artifact classifier
        classifier = 'bootified'
        // Maven repository
        repository = 'maven-snapshots'
        // Repository format
        format = 'maven2'
        // Artifact group
        group = 'com.devonfw.java.mtsj'
        // Application name
        name = 'mtsj-server'
        // Artifact extension
        extension = 'war'
    }

    parameters {
        string(name: 'VERSION', defaultValue: '1.12.2-SNAPSHOT', description: 'Version number') 
        string(name: 'EXTERNAL_SERVER_IP', defaultValue: 'CHANGE-ME', description: 'Server IP') 
        string(name: 'APPLICATION_DIR', defaultValue: '/root/mythaistar/reverse-proxy/', description: 'My Thai Star application directory')
    }

    stages {
        stage ('Download artifact from Nexus') {
            steps {
                script {
                    // Download artifact from nexus3 using the nexus3 beta api
                    // Search the list of artifacts
                    def response = httpRequest authentication: nexusCredentialsId, consoleLogResponseBody: true, ignoreSslErrors: true, responseHandle: 'NONE', url: """${nexusApiUrl}/service/rest/beta/search/assets?repository=${repository}&format=${format}&group=${group}&name=${name}&maven.groupId=${group}&maven.artifactId=${name}&maven.baseVersion=${params.VERSION}&maven.classifier=${classifier}&maven.extension=${extension}"""
                    def props = readJSON text: response.content

                    // Get the last snapshot download url
                    def num = -1
                    def url = ''
                    props.items.each { 
                        def n = (it.downloadUrl =~ /.*-(\d*)-bootified\.war/)[0][1]
                        println n
                        if (n > num) {
                            num = n
                            url = it.downloadUrl
                        }
                    }

                    // Download the snapshot
                    httpRequest authentication: nexusCredentialsId, ignoreSslErrors: true, outputFile: 'mythaistar.war', responseHandle: 'NONE', url: url
                }
            }
        }
        
        stage('Deployment') {
            steps {
                sshagent (credentials: sshAgentCredentials) {
                    sh """
                        # Copy resulting ".war" file from workspace to deployment server
                        scp -o StrictHostKeyChecking=no -r mythaistar.war root@${params.EXTERNAL_SERVER_IP}:${params.APPLICATION_DIR}java/
                        
                        # Launch application in Docker container
                        ssh -o StrictHostKeyChecking=no root@${params.EXTERNAL_SERVER_IP} docker-compose -f ${params.APPLICATION_DIR}docker-compose.yml up -d --build java
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
